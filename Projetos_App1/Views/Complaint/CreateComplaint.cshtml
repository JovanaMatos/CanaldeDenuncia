@model Projetos_App1.ViewModels.ComplaintViewModel


@{
    ViewData["Title"] = "Home Page";
}


<style>
 

    .file-upload__input {
        display: none;
    }

    .file-upload__button {
    border: 2px solid #191970; 
    border-right: none; 
    border-radius: 8px 8px 8px 8px;
    padding: 0.5em 0.8em;
    color: #ffffff;
    cursor: pointer;
    margin-right: 0; 
    background-color: #191970;
}

.file-upload__label {
    display: inline-block;
    padding: 0.5em 0.8em; 
    border: 2px solid #e9ecef; 
    border-left: none; 
    border-radius: 0 8px 8px 0; 
    color: #565656;
    width: 1120px;
}



</style>

<div class="text-center" id="homeTitle">
    <h1>Canal De Denúncias</h1>
</div>

<div hidden class="homeContainer">

    <div>
        <img class="clientLogo" src="~/images/logo.png" alt="img aqui" />
    </div>

    <div style="align-items: center; align-content:center;">
        <button class="bnt-home1">REGISTAR DENÚNCIA</button> <br />
        <button class="bnt-home1 bnt-home2">CONSULTAR DENÚNCIA</button>
    </div>

</div>


<br />

<form asp-controller="Complaint" asp-action="CreateComplaint" method="post" class="form-horizontal" enctype="multipart/form-data">

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>


    @* aparecer o nome e sumir e um houver com msg *@
    <select required id="typeComplaint" name="typeComplaint" class="form-select" aria-label="Default select example" onclick="FuncChangeTypeComplaint()">

        <option value="" selected>Tipo de Denúncia</option>
        <option value="1">Confindencial</option>
        <option value="0">Anónima</option>

    </select>

    <br />

    <div class="mb-3">

        <input asp-for="@Model.ComplaintSubject" type="text" class="form-control" placeholder="Assunto">
        <span asp-validation-for="@Model.ComplaintSubject" class="text-danger"></span>
    </div>


    <div class="row">
        <div class="col">
            <select asp-for="@Model.companyid" id="companyId" name="companyId" class="form-select">
                <option value="" selected>Empresa</option>

                @foreach (var item in Model.listCompany)
                {
                    <option value="@item.CompaniesId">@item.Name</option>

                }
            </select>
        </div>


        <div class="col">
            <select asp-for="@Model.CompanyRelationId" name="CompanyRelationId" class="form-select">
                <option value="" selected>Relação com empresa</option>
                @foreach (var item in Model.listRelation)
                {
                    <option value="@item.CompanyRelationId">@item.CompanyRelationship</option>

                }


            </select>

        </div>
    </div>
    <br />


    <div id="inputConfidential">

        <div class="mb-3">
            <input asp-for="@Model.Name" type="text" id="inputName" required title="Para este tipo de denúncia este campo é obrigatório" class="form-control" placeholder="Nome">
            <span asp-validation-for="@Model.Name" class="text-danger"></span>
        </div>

        @* formatar input number *@
        <div class="row">
            <div class="col">
                <input asp-for="@Model.PhoneNumber" type="tel" id="inputNumber" class="form-control" placeholder="Telemovel(Opcional)">
                <span asp-validation-for="@Model.PhoneNumber" class="text-danger"></span>
            </div>

            <div class="col">
                <input asp-for="@Model.Email" type="email" id="inputEmail" class="form-control" placeholder="Email(Opcional)">
                <span asp-validation-for="@Model.Email" class="text-danger"></span>
            </div>
        </div>
        <br />
    </div>

    <select asp-for="@Model.categoryid" class="form-select" id="categoryid">
        <option value="" selected>Selecione uma Categoria</option>
    </select>


    <br /><br />


    <div class="form-group">

        <textarea asp-for="@Model.ComplaintDescription" class="form-control" title="Campo obrigatório" placeholder="Descrição" id="textInput" rows=" 10" required></textarea>
        <span asp-validation-for="@Model.ComplaintDescription" class="text-danger"></span>
    </div>

    <br />


    <div id="file-upload" class="input-group mb-3">
        <input  class="file-upload__input" type="file" name="myFile[]" id="myFile" title="Selecionar Ficheiros" multiple onchange="checkExtension(this)">
        <button class=" file-upload__button" type="button">Selecionar Ficheiros</button>
        <span class="file-upload__label"></span>
    </div>
    <span id="errorFile" asp-validation-for="_files" class="text-danger"></span>



    <br /> <br />

    <div class="d-grid gap-2 col-6 mx-auto text-center">
        <button type="submit" value="CreateComplaint" class="btn btn-secondary btn-lg">SUBMETER</button>
    </div>
    <br />
</form>

<br />
<br />


<section class="text-center">
    <h6>Canal de denúcias em conformidade com a nova lei de proteção de denunciantes Lei n.º 93/2021</h6>
</section>






@section Scripts {
    @{
        <script>
            //função para formata input
            $('#inputNumber').inputmask({
                mask: '+999 999999999', // Formato para números brasileiros com +55
                //placeholder: '((___) _________', // Placeholder para mostrar o formato
                showMaskOnHover: false,
                showMaskOnFocus: true,
                //clearIncomplete: true,
                onBeforePaste: function (pastedValue) {
                    return pastedValue.replace(/\D/g, ''); // Permite colar apenas números
                }
            });

            //função para manipular DropDown
            $(document).ready(function () {

                getCategoryByCompanyId();
            });

            // Evento ao mudar o dropdown de empresa
            $("#companyId").change(function () {
                getCategoryByCompanyId();
            });

            // Função para buscar categorias com base no companyId

            function getCategoryByCompanyId() {
                var companyId = $('#companyId').val();
                if (companyId) {
                    $.ajax({
                        url: '@Url.Action("GetCategoryByID", "Complaint")',
                        type: 'GET',
                        data: { companyId: companyId },
                        success: function (data) {

                            $('#categoryid').empty();

                            $('#categoryid').append('<option value="" selected>Selecione uma Categoria</option>');
                            $.each(data, function (index, item) {

                                $('#categoryid').append('<option value="' + item.categoryId + '">' + item.categories + '</option>');
                            });
                        },
                        error: function () {
                            alert('Erro ao carregar as categorias.');
                        }
                    });
                } else {
                    $('#categoryid').empty();
                    $('#categoryid').append('<option selected>Categorias</option>');
                }
            }

            //função para verificar input

            const fileId = document.querySelector(".file-upload__input");


           


            // função selecionar o tipo de denúncias


            //pegando o tipo  escolhido de denuncia
            var typeComplaint = document.getElementById("typeComplaint");
            var typeComplaintValue = '';

            typeComplaint.onchange = function () {
                typeComplaintValue = this.value;
                console.log(typeComplaintValue);
            };

            function FuncChangeTypeComplaint() {
                if (typeComplaintValue === '0') {
                    inputConfidential.style.display = 'none';
                } else {

                    inputConfidential.style.display = '';
                }
            }

            function checkExtension($input) {
                var allowedExtensions = ['jpg', 'png', 'gif', 'pdf', 'txt', 'doc', 'docx'];
                var files = $input.files; // pegando os arquivos
                var error = false; // flag para verificar se há erros
                var inputFiles = document.getElementById("myFile");

                // Limpando msg erro
                $("#errorFile").html('');

                // Loop para verificar extensões de arquivos
                for (var i = 0; i < files.length; i++) {
                    var fileName = files[i].name;
                    var fileExtension = fileName.split('.').pop().toLowerCase(); // pegando a extensão e convertendo para minúsculas

                    // Verifica se a extensão não está na lista de permitidas
                    if (typeof allowedExtensions.find(function (ext) { return fileExtension == ext; }) == 'undefined') {
                        error = true; // Marca erro
                        $("#errorFile").html(
                            'Extensão "' + fileExtension + '" não permitida!<br>' +
                            'Apenas extensões permitidas: [jpg, png, gif, pdf, txt, doc, docx].'
                        );
                        break; // Interrompe o loop se encontrar uma extensão inválida
                    }
                }

                // Se houver erro, limpa o campo input
                if (error) {

                    inputFiles.value = "";

                }
            }




            //função para o arquivo
            Array.prototype.forEach.call(
                document.querySelectorAll(".file-upload__button"),
                function (button) {
                    const hiddenInput = button.parentElement.querySelector(
                        ".file-upload__input"
                    );
                    const label = button.parentElement.querySelector(".file-upload__label");
                    const defaultLabelText = "Nenhum arquivo selecionado";

                    // Set default text for label
                    label.textContent = defaultLabelText;
                    label.title = defaultLabelText;

                    button.addEventListener("click", function () {
                        hiddenInput.click();
                    });

                    hiddenInput.addEventListener("change", function () {
                        const fileCount = hiddenInput.files.length; // Conta a quantidade de arquivos
                        label.textContent = fileCount > 1 ? fileCount + " arquivos selecionados" : fileCount + " arquivo selecionado";
                        label.title = fileCount + " arquivo(s)";
                    });

                }
            );



        </script>

        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


@*
falar sobre o produto
aprensar
pode interroper quando falar


verficação campos de texto
arquivos e email
preciso fazer um ciclo de verificação


quro que le varios

 *@




